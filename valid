package ma.cih.novabank.smaloanswarrantyfollowupbatch.reader;

import ma.cih.novabank.smaloanswarrantyfollowupbatch.dto.CompensationClaimDTO;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.item.file.MultiResourceItemReader;
import org.springframework.batch.item.file.ResourceAwareItemReaderItemStream;
import org.springframework.core.io.Resource;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class CompensationClaimReaderTest {

    @Mock
    private ResourceAwareItemReaderItemStream<CompensationClaimDTO> annexResponseReader;

    @InjectMocks
    private CompensationClaimReader reader;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateMultiResourceItemReader() throws IOException, NoSuchFieldException, IllegalAccessException {
        // Mock the resources
        Resource resource1 = mock(Resource.class);
        InputStream inputStream1 = new ByteArrayInputStream("R12 Test Data".getBytes());
        when(resource1.getInputStream()).thenReturn(inputStream1);
        Resource resource2 = mock(Resource.class);
        InputStream inputStream2 = new ByteArrayInputStream("Invalid Data".getBytes());
        when(resource2.getInputStream()).thenReturn(inputStream2);
        Resource[] resources = {resource1, resource2};

        // Inject the resources using reflection
        Field field = CompensationClaimReader.class.getDeclaredField("resources");
        field.setAccessible(true);
        field.set(reader, resources);

        // Call the method under test
        MultiResourceItemReader<CompensationClaimDTO> result = reader.createMultiResourceItemReader(annexResponseReader);

        // Verify the filtered resources
        Field resourcesField = MultiResourceItemReader.class.getDeclaredField("resources");
        resourcesField.setAccessible(true);
        Resource[] filteredResources = (Resource[]) resourcesField.get(result);

    }
}
